* Add filters/AXO's to ACL Test page.

* Try to use paths more when including files, so require_once works
correctly if they already included Smarty or something.

* Figure out best way to do ACLs on select boxes.


* Add visual notification when a section has hit the $max_select_box_items.

* Write "mock" implementations to show off some of phpGACL's benefits.

* Write tutorial, some people may find phpGACL difficult to figure out.

* Oracle compatibility.
* Create include files with queries in each for the different databases. ie: include($db->db_type."-custom_sql.php");

* FUTURE: Build framework for the plugin system.
    Create a "plugin" directory.
    Create a "plugin" section on the acl_admin page where plugin form fields can be displayed?
    Plugins must be enabled in the config file, for both the admin interface and the calling interface?

* FUTURE: Possibly support tree'd ACOs.

* FUTURE: Allow phpGACL to set permissions on its own administration interface. 
Having said that, I think going 99.9% of the way would be inside said scope and
would be something to seriously consider. We could add all the ACO's, ARO's, Groups, and 
mark them "system" so they can't be deleted, as well as all the acl_check()'s. 
Then in an include file or something we could place a hook to plugin with any 
existing login/authentication mechanism and disable all this by default. Once the
user enables it and plugs in a simple ARO value, it would all come to life and allow
them the ability to use phpGACL to set permissions on itself. 

> There are a few things:
> 1) 'LEVEL' is a reserved word in Oracle. I had to change the column in
> GROUPS_PATH to 'glevel' and update
> gacl_api.class.php accordingly.

> 2) Oracle doesn't like the "AS" syntax used in the table list of a SELECT. 
> 
> ie: (line 57 of acl_admin.php)
> 
> select	b.id, c.name, b.name 
> from		aco_map as a, 	
> 		aco as b, 
> 		aco_sections as c 
> where 	a.aco_id=b.id 
> 		AND b.section_id=c.id 
> 		AND a.acl_id = $acl_id
> 
> Would have to change to:
> 
> select	b.id, c.name, b.name 
> from		aco_map  a, 	
> 		aco  b, 
> 		aco_sections c 
> where 	a.aco_id=b.id 
> 		AND b.section_id=c.id 
> 		AND a.acl_id = $acl_id

> 3) LEFT JOINs don't have the same syntax in Oracle. (that I know of)
> In acl_list.php I had to modify the "Glab all ACLs" query to look like this:
> 
>                        select        distinct
>                                         a.id,
>                                         f.name,
>                                         e.name,
>                                         a.allow,
>                                         a.enabled,
>                                         a.updated_date
>                        from     acl a,
>                                 aco_map  b,
>                                 aro_map  c ,
>                                 groups_map d,
>                                 aco  e ,
>                                 aco_sections  f
>                         where
>                                 a.id=b.acl_id (+)
>                                 and a.id=c.acl_id (+)
>                                 and a.id=d.acl_id (+)
>                                 and b.aco_id = e.id (+)
>                                 and e.section_id  = f.id (+)
>                         order by a.id, f.name, e.name
