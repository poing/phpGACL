* Add "About" page that shows the CREDITS file, and some useful information about the system to send in for bug
reports perhaps? Ask user if they wish to submit system info for record keeping perhaps?

* Create upgrade.php script, to handle as much of the upgrade process as possible. Have it display the changelog as well?

* Create "demo" script that creates sample objects/ACLs using only API commands.

* Array ACL Checks for select boxes. - Half done currently.

* Use ADODB's XML Schema to simplify the setup.php?

* Add visual notification when a section has hit the $max_select_box_items.

* Add filters/AXO's to ACL Test page.

* Oracle compatibility. XML Schema should fix the majority of the Oracle issues.

* Create include files with queries in each for the different databases. ie: include($db->db_type."-custom_sql.php");

* Create regression tests.

* FUTURE: Build framework for the plugin system.
    Create a "plugin" directory.
    Create a "plugin" section on the acl_admin page where plugin form fields can be displayed?
    Plugins must be enabled in the config file, for both the admin interface and the calling interface?

* FUTURE: Possibly support tree'd ACOs.

* FUTURE: Allow phpGACL to set permissions on its own administration interface. 
Having said that, I think going 99.9% of the way would be inside said scope and
would be something to seriously consider. We could add all the ACO's, ARO's, Groups, and 
mark them "system" so they can't be deleted, as well as all the acl_check()'s. 
Then in an include file or something we could place a hook to plugin with any 
existing login/authentication mechanism and disable all this by default. Once the
user enables it and plugs in a simple ARO value, it would all come to life and allow
them the ability to use phpGACL to set permissions on itself. 

* Write "mock" implementations to show off some of phpGACL's benefits.
